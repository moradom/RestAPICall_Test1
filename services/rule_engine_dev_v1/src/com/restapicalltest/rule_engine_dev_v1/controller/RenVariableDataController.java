/*Copyright (c) 2017-2018 preito.com All Rights Reserved.
 This software is the confidential and proprietary information of preito.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with preito.com*/
package com.restapicalltest.rule_engine_dev_v1.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.restapicalltest.rule_engine_dev_v1.RenVariableData;
import com.restapicalltest.rule_engine_dev_v1.service.RenVariableDataService;


/**
 * Controller object for domain model class RenVariableData.
 * @see RenVariableData
 */
@RestController("rule_engine_dev_v1.RenVariableDataController")
@Api(value = "RenVariableDataController", description = "Exposes APIs to work with RenVariableData resource.")
@RequestMapping("/rule_engine_dev_v1/RenVariableData")
public class RenVariableDataController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RenVariableDataController.class);

    @Autowired
	@Qualifier("rule_engine_dev_v1.RenVariableDataService")
	private RenVariableDataService renVariableDataService;

	@ApiOperation(value = "Creates a new RenVariableData instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public RenVariableData createRenVariableData(@RequestBody RenVariableData renVariableData) {
		LOGGER.debug("Create RenVariableData with information: {}" , renVariableData);

		renVariableData = renVariableDataService.create(renVariableData);
		LOGGER.debug("Created RenVariableData with information: {}" , renVariableData);

	    return renVariableData;
	}

    @ApiOperation(value = "Returns the RenVariableData instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RenVariableData getRenVariableData(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting RenVariableData with id: {}" , id);

        RenVariableData foundRenVariableData = renVariableDataService.getById(id);
        LOGGER.debug("RenVariableData details with id: {}" , foundRenVariableData);

        return foundRenVariableData;
    }

    @ApiOperation(value = "Updates the RenVariableData instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RenVariableData editRenVariableData(@PathVariable("id") Integer id, @RequestBody RenVariableData renVariableData) throws EntityNotFoundException {
        LOGGER.debug("Editing RenVariableData with id: {}" , renVariableData.getId());

        renVariableData.setId(id);
        renVariableData = renVariableDataService.update(renVariableData);
        LOGGER.debug("RenVariableData details with id: {}" , renVariableData);

        return renVariableData;
    }

    @ApiOperation(value = "Deletes the RenVariableData instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRenVariableData(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting RenVariableData with id: {}" , id);

        RenVariableData deletedRenVariableData = renVariableDataService.delete(id);

        return deletedRenVariableData != null;
    }

    @RequestMapping(value = "/renVariableId-version", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching RenVariableData with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RenVariableData getByRenVariableIdAndVersion(@RequestParam("renVariableId") int renVariableId, @RequestParam("version") int version) {
        LOGGER.debug("Getting RenVariableData with uniques key RenVariableIdAndVersion");
        return renVariableDataService.getByRenVariableIdAndVersion(renVariableId, version);
    }

    /**
     * @deprecated Use {@link #findRenVariableDatas(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of RenVariableData instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RenVariableData> searchRenVariableDatasByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RenVariableDatas list");
        return renVariableDataService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RenVariableData instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RenVariableData> findRenVariableDatas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RenVariableDatas list");
        return renVariableDataService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RenVariableData instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RenVariableData> filterRenVariableDatas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RenVariableDatas list");
        return renVariableDataService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRenVariableDatas(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return renVariableDataService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of RenVariableData instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRenVariableDatas( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting RenVariableDatas");
		return renVariableDataService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRenVariableDataAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return renVariableDataService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RenVariableDataService instance
	 */
	protected void setRenVariableDataService(RenVariableDataService service) {
		this.renVariableDataService = service;
	}

}

