/*Copyright (c) 2017-2018 preito.com All Rights Reserved.
 This software is the confidential and proprietary information of preito.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with preito.com*/
package com.restapicalltest.rule_engine_dev_v1.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.restapicalltest.rule_engine_dev_v1.RenVariable;
import com.restapicalltest.rule_engine_dev_v1.service.RenVariableService;


/**
 * Controller object for domain model class RenVariable.
 * @see RenVariable
 */
@RestController("rule_engine_dev_v1.RenVariableController")
@Api(value = "RenVariableController", description = "Exposes APIs to work with RenVariable resource.")
@RequestMapping("/rule_engine_dev_v1/RenVariable")
public class RenVariableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RenVariableController.class);

    @Autowired
	@Qualifier("rule_engine_dev_v1.RenVariableService")
	private RenVariableService renVariableService;

	@ApiOperation(value = "Creates a new RenVariable instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public RenVariable createRenVariable(@RequestBody RenVariable renVariable) {
		LOGGER.debug("Create RenVariable with information: {}" , renVariable);

		renVariable = renVariableService.create(renVariable);
		LOGGER.debug("Created RenVariable with information: {}" , renVariable);

	    return renVariable;
	}

    @ApiOperation(value = "Returns the RenVariable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RenVariable getRenVariable(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting RenVariable with id: {}" , id);

        RenVariable foundRenVariable = renVariableService.getById(id);
        LOGGER.debug("RenVariable details with id: {}" , foundRenVariable);

        return foundRenVariable;
    }

    @ApiOperation(value = "Updates the RenVariable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RenVariable editRenVariable(@PathVariable("id") Integer id, @RequestBody RenVariable renVariable) throws EntityNotFoundException {
        LOGGER.debug("Editing RenVariable with id: {}" , renVariable.getId());

        renVariable.setId(id);
        renVariable = renVariableService.update(renVariable);
        LOGGER.debug("RenVariable details with id: {}" , renVariable);

        return renVariable;
    }

    @ApiOperation(value = "Deletes the RenVariable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRenVariable(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting RenVariable with id: {}" , id);

        RenVariable deletedRenVariable = renVariableService.delete(id);

        return deletedRenVariable != null;
    }

    @RequestMapping(value = "/name/{name}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching RenVariable with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RenVariable getByName(@PathVariable("name") String name) {
        LOGGER.debug("Getting RenVariable with uniques key Name");
        return renVariableService.getByName(name);
    }

    /**
     * @deprecated Use {@link #findRenVariables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of RenVariable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RenVariable> searchRenVariablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RenVariables list");
        return renVariableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RenVariable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RenVariable> findRenVariables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RenVariables list");
        return renVariableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RenVariable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RenVariable> filterRenVariables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RenVariables list");
        return renVariableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRenVariables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return renVariableService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of RenVariable instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRenVariables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting RenVariables");
		return renVariableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRenVariableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return renVariableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RenVariableService instance
	 */
	protected void setRenVariableService(RenVariableService service) {
		this.renVariableService = service;
	}

}

