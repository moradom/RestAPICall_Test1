/*Copyright (c) 2017-2018 preito.com All Rights Reserved.
 This software is the confidential and proprietary information of preito.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with preito.com*/
package com.restapicalltest.rule_engine_dev_v1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restapicalltest.rule_engine_dev_v1.RenVariable;


/**
 * ServiceImpl object for domain model class RenVariable.
 *
 * @see RenVariable
 */
@Service("rule_engine_dev_v1.RenVariableService")
@Validated
public class RenVariableServiceImpl implements RenVariableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RenVariableServiceImpl.class);


    @Autowired
    @Qualifier("rule_engine_dev_v1.RenVariableDao")
    private WMGenericDao<RenVariable, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<RenVariable, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "rule_engine_dev_v1TransactionManager")
    @Override
	public RenVariable create(RenVariable renVariable) {
        LOGGER.debug("Creating a new RenVariable with information: {}", renVariable);
        RenVariable renVariableCreated = this.wmGenericDao.create(renVariable);
        return renVariableCreated;
    }

	@Transactional(readOnly = true, value = "rule_engine_dev_v1TransactionManager")
	@Override
	public RenVariable getById(Integer renvariableId) throws EntityNotFoundException {
        LOGGER.debug("Finding RenVariable by id: {}", renvariableId);
        RenVariable renVariable = this.wmGenericDao.findById(renvariableId);
        if (renVariable == null){
            LOGGER.debug("No RenVariable found with id: {}", renvariableId);
            throw new EntityNotFoundException(String.valueOf(renvariableId));
        }
        return renVariable;
    }

    @Transactional(readOnly = true, value = "rule_engine_dev_v1TransactionManager")
	@Override
	public RenVariable findById(Integer renvariableId) {
        LOGGER.debug("Finding RenVariable by id: {}", renvariableId);
        return this.wmGenericDao.findById(renvariableId);
    }

    @Transactional(readOnly = true, value = "rule_engine_dev_v1TransactionManager")
    @Override
    public RenVariable getByName(String name) {
        Map<String, Object> nameMap = new HashMap<>();
        nameMap.put("name", name);

        LOGGER.debug("Finding RenVariable by unique keys: {}", nameMap);
        RenVariable renVariable = this.wmGenericDao.findByUniqueKey(nameMap);

        if (renVariable == null){
            LOGGER.debug("No RenVariable found with given unique key values: {}", nameMap);
            throw new EntityNotFoundException(String.valueOf(nameMap));
        }

        return renVariable;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "rule_engine_dev_v1TransactionManager")
	@Override
	public RenVariable update(RenVariable renVariable) throws EntityNotFoundException {
        LOGGER.debug("Updating RenVariable with information: {}", renVariable);
        this.wmGenericDao.update(renVariable);

        Integer renvariableId = renVariable.getId();

        return this.wmGenericDao.findById(renvariableId);
    }

    @Transactional(value = "rule_engine_dev_v1TransactionManager")
	@Override
	public RenVariable delete(Integer renvariableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting RenVariable with id: {}", renvariableId);
        RenVariable deleted = this.wmGenericDao.findById(renvariableId);
        if (deleted == null) {
            LOGGER.debug("No RenVariable found with id: {}", renvariableId);
            throw new EntityNotFoundException(String.valueOf(renvariableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "rule_engine_dev_v1TransactionManager")
	@Override
	public Page<RenVariable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RenVariables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "rule_engine_dev_v1TransactionManager")
    @Override
    public Page<RenVariable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RenVariables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "rule_engine_dev_v1TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service rule_engine_dev_v1 for table RenVariable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "rule_engine_dev_v1TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "rule_engine_dev_v1TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

