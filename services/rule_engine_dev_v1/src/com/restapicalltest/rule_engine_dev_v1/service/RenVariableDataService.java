/*Copyright (c) 2017-2018 preito.com All Rights Reserved.
 This software is the confidential and proprietary information of preito.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with preito.com*/
package com.restapicalltest.rule_engine_dev_v1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.restapicalltest.rule_engine_dev_v1.RenVariableData;

/**
 * Service object for domain model class {@link RenVariableData}.
 */
public interface RenVariableDataService {

    /**
     * Creates a new RenVariableData. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RenVariableData if any.
     *
     * @param renVariableData Details of the RenVariableData to be created; value cannot be null.
     * @return The newly created RenVariableData.
     */
	RenVariableData create(@Valid RenVariableData renVariableData);


	/**
	 * Returns RenVariableData by given id if exists.
	 *
	 * @param renvariabledataId The id of the RenVariableData to get; value cannot be null.
	 * @return RenVariableData associated with the given renvariabledataId.
     * @throws EntityNotFoundException If no RenVariableData is found.
	 */
	RenVariableData getById(Integer renvariabledataId) throws EntityNotFoundException;

    /**
	 * Find and return the RenVariableData by given id if exists, returns null otherwise.
	 *
	 * @param renvariabledataId The id of the RenVariableData to get; value cannot be null.
	 * @return RenVariableData associated with the given renvariabledataId.
	 */
	RenVariableData findById(Integer renvariabledataId);

    /**
	 * Find and return the RenVariableData for given renVariableId  andversion  if exists.
	 *
	 * @param renVariableId value of renVariableId; value cannot be null.
	 * @param version value of version; value cannot be null.
	 * @return RenVariableData associated with the given inputs.
     * @throws EntityNotFoundException if no matching RenVariableData found.
	 */
    RenVariableData getByRenVariableIdAndVersion(int renVariableId, int version)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing RenVariableData. It replaces all fields of the existing RenVariableData with the given renVariableData.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on RenVariableData if any.
     *
	 * @param renVariableData The details of the RenVariableData to be updated; value cannot be null.
	 * @return The updated RenVariableData.
	 * @throws EntityNotFoundException if no RenVariableData is found with given input.
	 */
	RenVariableData update(@Valid RenVariableData renVariableData) throws EntityNotFoundException;

    /**
	 * Deletes an existing RenVariableData with the given id.
	 *
	 * @param renvariabledataId The id of the RenVariableData to be deleted; value cannot be null.
	 * @return The deleted RenVariableData.
	 * @throws EntityNotFoundException if no RenVariableData found with the given id.
	 */
	RenVariableData delete(Integer renvariabledataId) throws EntityNotFoundException;

	/**
	 * Find all RenVariableDatas matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching RenVariableDatas.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<RenVariableData> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all RenVariableDatas matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching RenVariableDatas.
     *
     * @see Pageable
     * @see Page
	 */
    Page<RenVariableData> findAll(String query, Pageable pageable);

    /**
	 * Exports all RenVariableDatas matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the RenVariableDatas in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the RenVariableData.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

